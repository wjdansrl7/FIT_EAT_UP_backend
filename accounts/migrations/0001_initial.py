# Generated by Django 3.2.15 on 2022-10-05 04:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Place',
            fields=[
                ('address_name', models.CharField(max_length=200)),
                ('category_group_code', models.CharField(max_length=50)),
                ('category_group_name', models.CharField(max_length=100)),
                ('category_name', models.CharField(max_length=50)),
                ('distance', models.CharField(blank=True, max_length=50, null=True)),
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('phone', models.CharField(blank=True, max_length=13)),
                ('place_name', models.CharField(max_length=200)),
                ('place_url', models.URLField(blank=True)),
                ('road_address_name', models.CharField(max_length=50)),
                ('x', models.DecimalField(decimal_places=15, max_digits=18)),
                ('y', models.DecimalField(decimal_places=15, max_digits=18)),
                ('image', models.ImageField(blank=True, upload_to='accounts/image/%Y/%m/%d')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('nickname', models.CharField(max_length=30, unique=True)),
                ('avatar', models.ImageField(blank=True, help_text='48px * 48px 크기의 png/jpg 파일을 업로드해주세요.', upload_to='accounts/avatar/%Y/%m/%d')),
                ('follower_set', models.ManyToManyField(blank=True, related_name='_accounts_user_follower_set_+', to=settings.AUTH_USER_MODEL)),
                ('following_set', models.ManyToManyField(blank=True, related_name='_accounts_user_following_set_+', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('like_places', models.ManyToManyField(blank=True, related_name='like_users', to='accounts.Place')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('visit_places', models.ManyToManyField(blank=True, related_name='visit_users', to='accounts.Place')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
